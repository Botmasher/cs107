STANFORD CS107
https://see.stanford.edu/Course/CS107

0. First Day of Class :D
- CS106b/x prereq, looks like lots of compsci problem types/abstractions
- requires lots of C++, first few wks have work cut out for you
- MUST know:
	- arrays
	*- pointers
	- references
	- classes
	*- dynamic memory allocation
	- recursion
	- linked lists
	- binary search trees
	- hashing
	- iterators
	*- function pointers
	- decomposition
- Syllabus (points above) and Resources list on the class page
	- C++, Purify, vi/xemacs, gdb, Scheme

LECTURE 1 6/29/2017
- C
	- imperative paradigm, verb/function-oriented
	- C++ myobject -> dothis (data being manipulated)
	- that's why C++ is object- not function-oriented
	- many people think in C even while C++, sticking w functional not obj
- Assembly
	- show you how a line like j++ translates
	- C++ doesn't execute as C++
	- show how everything compiles to 0s and 1s
	- see how C++ and C almost look the same when compiling
	- gives you idea as to why crashing
- Concurrent
	- we do it in C at the moment
	- all programs prior to 107 have been sequential
	- pipelined/parallel instructions instead of clean streams
	- within a single program, get 2 funcs to (seemingly) run simultaneously
	- tends to switch back and forth so fast can't really see the diff
	- networking in particular, it's very useful
	- however, problems come up (e.g. transactional, shared resources)
	- banks and airlines worried about giving away resources
- Scheme
	- related to Lisp
	- functional paradigm representative
	- 2 things interesting vs C/C++
		- always rely on return value of func to move forward
		- program without side effects
	- such a small language and fun
- Python
	- instead of advanced C++ or Java (108 is all about Java)
	- as "a more modern, object-oriented version of PERL"
	- web programming boring, lots of HMTL, but Python has libraries
	- "great libraries", object-oriented, functional ideas even allowed
	- good vehicle for parsing and protocols
- Next time, low-level pointer stuff!

From the transcript but not in the vid:
- C more difficult but used by longtimers
- by the end you'll be able to read this: **&**P -> ***=7


LECTURE 2
- Low-level mem mechanics, how everything represented 0 1
- C/C++
	- bool, char, short, int, long, float, double
	- short, int, long all rep scalars
	- float and double for arbitrarily precise numbers
 	char 		1 byte
	short 		2 bytes
	int 		4 bytes
	long 		4 bytes
	float 		4 bytes (finite mem tries to do inf precis)
	double 		8 bytes
- binary digit => bit
	- EE think of transistors, hi/lo voltages)
	- CS just think in terms of 2 vals
	- more interesting taken in groups
	- each bit adopts value independently of others
	- therefore 8 bits can distinguish 2**8 values
- chars 
	- epresented in mem backed by some num e.g. A is 65
	- 'A' = 65 but actually some sum of powers of 2 (64+1)
	- 8 is 2**3, etc.
	- looking at all transistors would look like 01000001
	- think of powers of 2 at that position, e.g. 1 at 2**6
- shorts
	- 2 sets of 8 bits separated in 2 boxes
	- contribution of 2 to the whatever again
	- now go up you can get 2 to the 9th, etc. (2 bytes)
	- 0 followed by all 1s is 1 less than 2 to that power
	- 0 to 2**16-1 is range, BUT -2**15 to 2**15-1 instead 
	- the leftmost bit is SIGN not the MAGNITUDE
	- hogs a bit more memory if the second byte is all 0s
	- SIGN BIT: addition/sub use 2'S COMPLEMENT not 1'S C!
		- invert all bits, then add 1 in the 2**0 col!
	- want just as many negs as pos, so leftmost is neg/pos

char ch = 'A';
short s = ch; 	// don't need a cast for that, it's the num
cout << s << endl;
// prints 65 because ch just puts 65 in its bites
// then s has extra byte 0s and a "smear" of 65 in 1st byte

- shorts assigned to a char will punt on the extra byte!

- same thing it init a short as an int
	- just BIT PATTERN copy; remember this is electronics
	- no patience for dealing with the other 2 bytes

short s = -1;
	- tricky representation: 2 bytes all 1s!!
	- this is so you can add to get pos 1
int i = s;
	- NOT simple BIT PATTERN copy like the above cases
	- now the domino effect goes on into the other 2 bytes
	- the other 2 bytes are now full of 1s

- floats
	- 32 bits with a leftmost sign bit
	- think it's 2 to the 30 all the way down to 2 ** 0?
	- NOPE! could use contributions of 2 to negative num?
	- NOPE! instead don't cut it into bytes equally
		- have 1 of 32 bits as sign
		- next 8 bits are unsigned EXPONENT only
		- remaining 23 bits are 2**-1, 2**-2, 2**-3
	- in other words, it's
		(-1)**SIGN (1.xxxxxx * 2 ** exp-127)
	- tries to get dec as close to .999....
	- this is how floats rep in memory

// what happens when assign int to float or float to int
//	- has to evaluate what number the original bit pattern
//	- THEN has to lay out NEW bit pattern in float!
int i = 5;
float f = i;
// lots of 0s followed by 0101 at the end, you know
cout << f << endl;
// you'll get the number 5
// 5.0 totally different bit pattern tho
5 => 5.0 => 1.25*2**2

// can also just evaluate the location of i
int i = 37;
float f = *(float*)&i;
// &i  		we point to the address of i (type int*)
// (float*) we coax into thinking of the SAME bits as float
// * 		we dereference it, getting the value pointed at
// IF PRINTED will just get a really small number
// (because the float is a bunch of right 1s)

float f = 7.0;
short s = *(short*)&f; 	// loc in mem from leftmost spot
// looks similar prob except figures different sizes
// ALWAYS cuts from leftmost point because that's pointer!
// lay them out, you'll see right 2 bytes ignored
// assumes is short, just replicates left bit pattern
// so you just get smear of the left 2 bytes!


LECTURE 3

// clarifying confusion (we understood, some students did not)
double d = 3.1416;
char ch = *(char*)&d;
// the actual bit pattern is irrelevant
// this is an expression on the address of d
// seduced into thinking it's storing the ref of a single char
// pretending to be char for lifetime of char ch statement

short s = 45;
double d = *(double*)&s;
// most still applies, but mysterious:
// &s address assoc c that arrow
// now that thinks pointed to 8-byte double, so
// also assigns the bytes that follow
// byte pattern is 45 + more bytes

- big endian, little endian
	- 2-byte short c a 1 preceded by 0s is true for .5 systems out there
	- in other .5 are little endian, bigger magnitude bytes follow to R!
	- bit copy btwn big e machines to little e machines get difft shorts

// 4 bytes stacked on top of 4 more bytes
// address of entire struct ALWAYS coincident c first field address
// pi. denom on top, pi.num below (pi.num is where arrow points)
// don't know if it's num OR the entire struct that's being pointed
struct fraction {
	int num;
	int denom;
}
fraction pi;
pi.num = 22; 	// places 22 at 0 offset from base of entire struct
pi.denom = 7; 	// places 7 at 4 bytes above base of struct
// knows that denom is 4 bytes above the address of the num

/*
 * NOW INVADE pi.denom's space using QUIRKY SYNTAX
 * 	- change it's value using references
 */
&(pi.denom) 			// gets an int*
(fraction*)&(pi.denom)	// gets address of pi.denom as if it's fraction*
// arrow travels to struct and identifies num as place that should receive 12
((fraction*)&(pi.denom))->num = 12;
// travel to fraction struct and identify num field to receive the 12
// this replaces pi.denom from 7 to 12 "behind pi.denom's back"!

// now we smear the bytes above pi.denom with 33
// even though no way of legally accessing this because stored above struct
((fraction*)&(pi.denom))->denom = 33;

// note that to access this now you'd workaroudn to get back to those bytes
((fraction*)&(pi.denom))[0].denom;

- array is COMPLETELY synonymous with ADDRESS of the ZEROTH ENTRY
int array[10];
array[0] = 44;
array[9] = 100;
array[5] = 45;
array[11] = 1; 		// might succeed or crash based on touching local vars
					// NOT because of bounce checking
// THEOREM: array <-> &array[0]
// NO bounce checking on raw arrays, so array[11]=1 tries to place 1!!
// same with array[-4]=77

// THEOREM: array+k <-> &array[k]
// you're doing pointer arithmetic, the boundaries between ints
// k automatically scaled based on the type system (e.g. int 4 bytes wide)

// THEOREM: *array <-> array[0]
// THEOREM: *(array+k) <-> array[k]
*(array-4) = 77; 	// brings you 16 bytes before

int arr[5];
arr[3]=128; 		// bits fit and updated in right half of box 3
(short*)arr; 		// now thinks arr stores shorts
(short*) arr[6]=2; 	// writes a 2 in the left half of index 3's bytes!!
cout << arr[3] << endl; 	// prints out both left and right bits!

((short*)(((char*)(&arr[1])+8))[3]=100; 	// writes 100 way after array

- in C we don't write generics, we leverage the fact we know
	- size of everything
	- and bit pattern of everything

// 16 byte struct
struct student{
	// no string class in C++, so char arrays ending with null char
	char* name; 	// store address of zeroth char
	char suid[8]; 	// 2x 4 array blocks above name
	int numUnits; 	// int bytes above suid blocks
}
// now lay out 4 student structs side by side (like array)
student pupils[4];
pupils[0].numUnits=21; 	// 21 goes in topmost field of zeroth struct
// dynamically alloc enough space for "Adam" then returns addr of "A"
// makes enough space for \0 (end character)
pupils[2].name = strdup("Adam");

// NOW do some funkiness using those structs
pupils[3].name = pupils[0].suid+6; 	// do pointer arithmetic agst a char*
// strcpy just sees 
strcpy(pupils[1].suid, "40415xx"); 		// copy characters to suid
	// make SURE that it's char address under your jurisdiction - was fine
strcpy(pupils[3].name, "123456"); 		// copy characters to field
	// was NOT fine - [3]'s.name pointer changed above, so now
	// we're writing into pupils[0].suid+6 !!!!!
	// better make sure you own that mem if you're writing char or whatever
pupils[7].suid[11]='A'; 			// still does manual arithm to find!

- free up memory using FREE (like DELETE in other lang)
- if print out chars in char array from an index, prints all chars to right
	- final /0 doesn't print out 'naccount of being weird rep of empty string

// bit pattern swapping
void swap(int *ap, int *bp)
{
	// I know that ap and bp are just pointers to x box and y box
	int temp = *ap;
	// temp is now smeared with whatever the value of ap is
	*ap = *bp; 	// space addressed by ap is now set to what bp evaluates to
	*bp = temp; // achieve the swap
}
int x=7;
int y=117;
// C has no templates and no references, just addresses
// knows where to go to move byte patterns around
swap(&x,&y);

- in other langs we'd templatize (generic)
 	- see we can do swaps, etc. using info learned last 2 lectures
 	- it's not hacky, it's beautiful


LECTURE 4
// more notes on swap to clarify
- that int swap thing above again
	- I don't care they're ints, I want to exchange the REPRESENTATIONS
	- then when I go back to this, the bit patterns are exchanged
	- now when they look at each other, they'll be each other's ints!
- that's the 107 bent, bc it declares a 4-byte figure replicated in that box
- it's REALLY a bit-pattern rotation
- I CANNOT use this to swap doubles

// version of swap that's not constrained to 4 bytes
void swap(void * vp1, void * vp2, int size) {
	// vp1 and vp2 now just point to something starting at generic address
	// void * may be anything, it's NOT meaning this is nothing
	// int size is the number of figures being swapped - this is key info
		// as long as I exchange the byte bit pattern, I'm swapping them
	char buffer[size]; 	// setting aside enough space to hold size bytes
	memcpy(buffer, vp1, size); // like strcpy but no \0, explicit byte size
	memcpy(vp1, vp2, size);  	// replicating over space
	memcpy(vp2, buffer, size); 	// now rotate stuff stored in buffer
}

// the old swap WOULD NOT WORK for generics but "heart is in the right place"
// cannot declare void types and cannot initialize w unknown byte info
void temp = *vp1; 	// void isn't a type, plus we don't know size of vp1
*vp1 = *vp2;
*vp2 = temp; 		// so the rest of this won't work because of above

// ugliness
- problems with using a buffer and mem copy
	char buffer[size]; 	// some C compilers expect buffer size to be a constant

- lots and lots of things can be disguised as void*
 	int x = 17, y = 37;
 	swap(&x,&y,sizeof(int)); 	// OK!

 	double d=π, e=e;
 	swap(&d,&e,sizeof(double)); // called a lot gives copies of code for each type
 	// no compiler errors even though issues arise

- using generics and casts RISKS MORE on runtime, telling compiler not to bother
 	int i = 44;
 	short s = 5;
 	swap(&i,&s,sizeof(short)); 	// mem setup will only accept 2 bytes of short
 	// survives compilation
 	// BUT => short's bits end up in int's left 2 bytes + 44 and 0 alone for s!!

- imagine you did sizeof(int) above instead
 	- possibly worse, as you're grabbing whatever bytes are right of s to swap!

- data types that are already pointers
	char * husband = strdup("Fred"); 	// strdup for indep copies of strings here
	char * wife = strdup("Wilma");

	- in heap |F|r|e|d|\0| and |W|i|l|m|a|\0|
	- but our variables are pointers to those things, they are not those things
	- now I want association from one string to other and vice versa
	swap (&husband,&wife,sizeof(char*));

	- I want to exchange the two things held by husband and wife variables
	- if I want to exchange two char*, I have to pass in addresses to swap
	- if copy address of the char*, happens to be replicated char* material
	- so the pointer addresses are being exchanged, not the values themselves!
	- NOTHING happens to the characters themselves, they stay put!
	- PROBLEM: if you forget to add the address ampersand, will compile
	swap (husband,wife,sizeof(char*));
		- store address of the actual characters (F and W)
		- those characters are evaluated and passed directly to vp1 and vp2
		- copies Wilm\0 and then Freda\0 (size of char* being 4 bytes)
		- worse, that's now the pattern WITHIN the char*, so...
		- we now have a char* husband with an address of Wilm!

- Moral: compiler usually tells you if problem, but NOT with generics

- linear search of first instance of key in array
	// good old homeworky implementation
	int lsearch(int key, int array[], int size) {
		for (int i=0; i<size; i++) {
			if (array[i]==key) {
				return i;
			}
		}
		return -1;
	}
- pay attention to all that's going on in line if(array[i]==key)
	- the array
 	- implicit pointer in array notation
	- bitwise comparison in ==
 	- lose the ability to compare two integers when don't know what they are
- framing a generic version
	- array [             ]
	- i=0 to i=0 advance needs size info about how big elements are
	- manually compute what the addresses are
	- need comparison function to compare key to material in array
		- specify key by address, specify array by address
		- compare the two pointers, actually material at those addresses
		- know the size of each element in the array
		- decide whether or not they match and compare on next iteration

	void *lsearch(void *key, void *base, int n, int elemSize) {
		for(int i=0; i<n; i++) {
			// now compute the address of the ith element
			void *elemAddr = (char*)base + i*elemSize; 	// "the void* hack"
				// seduce base so that we CAN do pointer math here
			 	// fine to assign to void* bc going more to less specific here
				// recall base identifies base address of the entire array
			// now compare elemSize bytes at addresses for dead match
			if (memcmp(key,elemAddr,elemSize)==0) return elemAddr;
				// works for bool, shorts, chars, longs, ints, doubles, floats
				// but DOES NOT work well for character pointers, strings, structs
				// you REALLY should deal with function pointers
		}
		return NULL;
	}

	- the only reason for hack is for compiler to accept void* pointer arithmetic
		- char* because it's 4 bytes long enough to do normal math
		- some people use unsigned longs instead, still for the 4 bytes
	- in array[i] the i is implicitly multiplied by sizeof(int) for you
		- so you're doing some of the compiler's work with (char*)base+i*elemSize
	- *(array+i) 	multiplies behind the scenes by sizeof(int)

	// prototype for another iteration of this function

	void *lsearch (void *key, void *base, int n, int elemSize, int (*cmpfn)(void*, void*)) {
	}
	- 5th parameter has to be a pointer to a function that takes any two void*
	- this comparison function will return 0, 1, -1
	- this is how you use it as a client searching array using generic version


LECTURE 5
void *lsearch (void *key, void *base, int n, int elemSize, int (*cmpfn)(void*,void*)) {
	// don't care about specific data type
	for (int i=0; i<n, i++) {
		// compute address of each element
		void *elemAddr = base + i*elemSize; 		// typeless pointer
		void *elemAddr = (char*)base + i*elemSize;  // so hack for a sec instead
		if (cmpfn(key, elemAddr) == 0) { 	// tell C compiler I know how to compare these
			return elemAddr; 	// it matches key we are looking for
		}
	}
	return NULL; 	// sentinel that nothing worked out
}
	// the hard part isn't linear search, but the pointer math

int array[] = {4,2,3,7,11,6}; 	// shorthand initialization
// now search for the integer 7
int size = 6; 		// actually know how big my boxes are
int number = 7; 	// set aside space for key I'm interested in
int *found = lsearch (&number,array,6,sizeof(int),IntCmp);
if (found==NULL) { 
	// sadness
} else {
	//happiness
}

// write the implementation to match prototype
int IntCmp (void *elem1, void *elem2)
{
	// since I know they're really ints, I reinterpret them
	int *ip1 = elem1; 	// compiler understands does not need a cast
	int *ip2 = elem2;
	return *ip1 - *ip2;
}

- not elegant, but it's what C can do for Generics
- BUT is very fast and only does one copy for all our lsearching
	- NO code bloat like other langs or worse implementations

// problem: now search through array of char* for a particular char*
char *notes[] = {"Ab","F#","B","Gb","D"}; 	// not in heap, like global vars
char *favoriteNote = "Eb";
char **found = 	// to search through array for my favorite note
	lsearch(&favoriteNote,notes,5,sizeof(char*),StrCmp);
	// ampersand because I want true data type of key to be same as arrows compared to it

- StrCmp will return NULL or one of the five arrows to one of the char*
	- size of char* and char** are identical because pointers same length
	- but elegant for sizeof to be data type whose size I'm jumping through in mem boxes

int StrCmp(void *vp1, void *vp2)
{
	// cast to make things typesafe
	char *s1 = *(char**)vp1; 	// because it's a pointer to a char*, so we want the char*
		// needed that because we put & before first element, since it was just a char array
	char *s2 = *(char**)vp2;
		// this is a char**, since it's our array of character arrays
	return strcmp(s1,s2); 	// now I pass to C lib func that knows to brute force compare
		// will give 0, -1 or 1
}

- Generic bsearch algorithm is the C builtin to do binary search
void *bsearch (void *key, void *base, int n, int elemSize, int(*cmp)(void*, void*))
	// n here as always is size of array
{
	// note you can pass to key addr of ANYTHING as long as first arg knows it's addr of sth
	// NOT EVERY block of code that takes params is a func
	// BUT HERE we mean ones that aren't members of an object
		// bc those keep around "invisible" address of a "this"
}

- so many notes on the function and on this pointer bc of problems people have
- this is passed around, evaluates to address of object being manipulated
- that's what makes method difft from function, and why the above reqs a funct not a method

/* 
 * Implement a stack data structure, int specific
 */
	- keep in mind we have no templates or classes or vectors like C++!
	- separate behavior and implementation by .h and .c scheme
	- as close to a class as possible using just C syntax below!
// my stack.h file
typedef struct {
	int * elems; 		// the location of an array
	int logicalLen; 	// implicit boundary between what's in use and not in use
	int allocLength; 	// how long the array is
} stack; 		// now all 3 fields are exposed (explicitly public)
// expected now: do NOT manipulate the 12 bytes in struct, just use functions to interact
void StackNew(stack *s);
void StackDispose(stack *s); 			// make like nothing there
void StackPush(stack *s, int value); 	// increase its depth
int StackPop(stack *s);

stack s; 		// we know it's a big box with 3 fields stacked on top of each other
StackNew(&s); 	// we know location of the stack, so now CLEAR IT OUT!
	// reset logical len to 0, the length of our array to 4, and int *elems to new array
	// when we get to 5 bytes we'll have to add (on StackPush) another 4-byte array
	// we'll have to manually compute to house the next push call

for (int i=0; i<5; i++) {
	StackPush(&s,i);
}
	// we'll put 0, 1, 2, 3, 4 on logical length
	// on very last iteration, we panic and double, set aside space for 8
	// copy data that was already there, point to the bigger house :D
	// now I can lay down ints 4, 5, ...
StackDispose(&s);

void StackNew(stack *s) {
	// know that s is local var, assume it's 12-bytes stacked on each other
	s->logicallen = 0; 	// arrow operator because through pointer to stack
	s->alloclen=4;
	s->elems=malloc(4*sizeof(int)); 	// get this many (16) bytes and return address
	assert(s->elems!=NULL); 		// test, no-op if true, ends program if false
		// need this in case malloc failed and returned NULL
		// don't want say program to crash because we deref a NULL pointer somewhere
		// segfaults and buserrors would happen, ASSERTS are better
		// BUT don't want asserts to customer because it makes it clear your code failed
}



LECTURE 6

- in C stuff is implicitly public, have to write stuff to pretend struct stuff invis!

void StackNew(stack *s)
{
	s->loglength=0;
	s->alloclength=4;
	s->elems=malloc(4*sizeof(int));
	assert(s->elems!=NULL);
}

void StackDispose(stack *s)
{
	// opposite of malloc
	free(s->elems); 	// donated back to the heap is what "free" means
	
	// should I free(s) itself? NO! I never allocated space for stack, only assumed
	// address identified; do NOT know it's dynamically allocated at all!
	// BUT if I'm doing strings not ints, need to iterate over each and free up char*!
}

void StackPush(stack *s, int value)
{
	// reallocation part (doubling strategy popular: just once every power of 2)
	// deals with scenarios where actually out of space!
	if(s->loglength==s->alloclength) {
		// value has no home because pressing on an extra int onto our stack
		// client does NOT need to know about this temporary emergency

		// reallocate the array
			// C++: a bigger array and manual copy, then delete the old mem
			// C: don't call malloc and do that; call value previously handed back
			// to you by malloc and resize it!
		s->alloclength*=2;
		s->elems=realloc(s->elems, s->alloclength*sizeof(int)); 
		// tries take pointer passed in, resize in place without replicating mem
			// if so, just take the next blocks after that
		// second param takes care of all details to make block that big
		// if space is in use, calls malloc somewhere else for you
			// whatever bit pattern, replic bit pattern, frees orig, returns new addr
		// if you don't pass in first just malloc finds some mem for you

		// macro: some condition in order to move forward if reallocating passes
		assert(s->elems!=NULL);
	}

	s->elems[s->loglength]=value; 	// if stack is empty, loglength is 0
	s->loglength++;					// stack depth and next call insertion index
}

void StackPop(stack *s)
{
	assert(s->loglength>0);
	s->loglength--;
	return s->elems[s->loglength];
}

/* Stack for char* or strings instead
 * 	dealing with generics instead of ints
 */
stack.h

typedef struct {
	void *elems; 		// lost ability to do pointer arithmetic
	int elemSize;
	int loglength; 		// still have how many mystery elems I have
	int alloclength; 	// how many bytes to alloc for initial stack

}

void StackNew(stack *s, int elemSize);
void StackDispose(stack *s); 				// mostly the same as for int
void StackPush (stack *s, void *elemAddr); 	// can't commit to spec pointer type
	// just have to trust the addr be pointing to s->elemSize figure
void StackPop (stack *s, void *elemAddr); 	// where client elem should be laid down

void StackNew(stack *s, int elemSize)
{
	assert(s->elemSize>0); 		// avoid e.g. someone doing work to allocate -40 bytes
	s->loglength=0; 			// counter (implicit boundary btwn mem used and not used)
	s->alloclength=4; 			// length of the array
	s->elemSize=elemSize;
	s->elems=malloc(4*elemSize); 	// can't use size because no type known
	assert(s->elems!=NULL); 		// don't continue if elements null
	????? 	// secret var not yet given!
	// all info we need to compute boundaries between elements now
}

void StackDispose(stack *s)
{
	free(s->elems);
		// not concerned that info inside the blob might be complicated
}

void StackPush(stack *s, void *elemAddr)
{
	// simplified implementation by writing helper function
	if (s->loglength==s->alloclength)
		StackGrow(s);
	void* target = (char*)s->elems + s->loglenth * s->elemSize;
		// it's typed to be void* so cast as char* for pointer arithmetic
		// 
	memcpy(target,elemAddr,s->elemSize); 	// copy whatever's at elemAddr that many bytes

}

// static decorating function (NOT method) is not accessible outside this file
 	// technically "internal linkage" .o files to see what's not exported
 	// whereas StackPush etc are global and accessible to call from other .o files
 	// NOT a waste of time, because each of many files linked together can have
 	// so many of the same functions, such as a "swap" function
static void StackGrow(stack *s)
{
	s->alloclength*=2;
	s->elems=realloc(s->elems, s->alloclength*s->elemSize); 	// addr to reallc, how big for it to be
		// make it twice as big (already done) and mult by how big each elem is (REMEMBER TO DO THIS!)'
		// as above, realloc checks mem avail right next to current alloc otherwise cpy new and free old
	// this is so we can focus on the StackPush actions above and not this stuff
}

// most interesting and different from int implementation
void StackPop(stack *s, void* elemAddr)
{
	void *source = (char*)s->elems + (s->loglength-1) * s->elemSize;
		// drawing bit pattern from big blob behind the scenes
	// so we can replicate into elemaddress
	memcpy(elemAddr,source,s->elemSize);
	s->loglength--;

	// as long as everything is consistent, laid down right number of bytes to get back
	// what we want
	// I'm not changing elemAddr
}

int top;
stack s;
StackNew(&s, sizeof(int)); 
	// if I know I have sixteen elements, I want to pop off top element
StackPop(&s, &top); 	// have to pass in address of some integer
	// has elemAddr that points to stack

// unit tests to make sure behaving as think
	// as client, might loop over ints 1 through 1 million
	// might set alloc length to be 1 instead of 4
	// pop everything off until empty to make sure descending 1 mill down to 1
	// if fails, problem; if succeeds, evidence it's close
// risks: the memcpy and the minusminus are risky

- Generics in C and manual casts
	- be that much more expert to make sure don't make mistakes
	- most write program, compile then go thru all kinds of errors
	- even if doesn't run right, it rarely crashes
	- C++ is more strongly typed than C because compilation templates typecheck
		- so first stab at C possible it works as expected
		- easy to get it to compile
	- BUT it's hard to get this right every time you program in C
		- e.g. he forgets s->elemSize in realloc bc it's unnatural to think raw bytes
		- but if you're dealing with wrong things, ints, will compile but wrong size
	- if crashes, not compiler, it's your code